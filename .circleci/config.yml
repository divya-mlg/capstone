version: 2.1

commands:
  destroy_environment:
    description: destroys cluster on fail
    steps:
      - run:
          name: destroy cluster
          when: on_fail
          command: |
            eksctl delete cluster --name=capstone-cluster

jobs:
  frontend-lint-checks:
    docker:
      - image: python:3.11.1-bullseye
    steps:
      - checkout
      - run: 
          name: install python requirements
          command: |
            cd frontend
            make install
      - run:
          name: Install hadolint
          command: | 
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            chmod +x /bin/hadolint
      - run:
          name: lint checks
          command: | 
            cd frontend
            make lint
  backend-lint-checks:
    docker:
      - image: python:3.11.1-bullseye
    steps:
      - checkout
      - run: 
          name: install python requirements
          command: |
            cd backend
            make install
      - run:
          name: Install hadolint
          command: | 
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            chmod +x /bin/hadolint
      - run:
          name: lint checks
          command: |
            cd backend
            make lint
  build-frontend:
    docker:
      - image: cimg/base:stable
        auth:
          username: divyavan
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name:
          command: |
            cd frontend
            docker version
            docker build -t capstone-frontend:v1 .
            docker image ls
            echo $DOCKER_ACCESS_KEY | docker login -u divyavan --password-stdin
            dockerpath=divyavan/capstone-frontend:v1
            docker image tag capstone-frontend:v1 $dockerpath
            docker push $dockerpath
  build-backend:
    docker:
      - image: cimg/base:stable
        auth:
          username: divyavan
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name:
          command: |
            cd backend
            docker version
            docker build -t capstone-backend:v1 .
            docker image ls
            echo $DOCKER_ACCESS_KEY | docker login -u divyavan --password-stdin
            dockerpath=divyavan/capstone-backend:v1
            docker image tag capstone-backend:v1 $dockerpath
            docker push $dockerpath
  build-new-frontend:
    docker:
      - image: cimg/base:stable
        auth:
          username: divyavan
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name:
          command: |
            cd frontend
            docker version
            cp Dockerfile_v2 Dockerfile
            cp requirements_v2.txt requirements.txt
            cp app_v2.py app.py
            docker build -t capstone-frontend:v2 .
            docker image ls
            echo $DOCKER_ACCESS_KEY | docker login -u divyavan --password-stdin
            dockerpath=divyavan/capstone-frontend:v2
            docker image tag capstone-frontend:v2 $dockerpath
            docker push $dockerpath
  build-new-backend:
    docker:
      - image: cimg/base:stable
        auth:
          username: divyavan
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name:
          command: |
            cd backend
            docker version
            cp Dockerfile_v2 Dockerfile
            cp requirements_v2.txt requirements.txt
            cp app_v2.py app.py
            docker build -t capstone-backend:v2 .
            docker image ls
            echo $DOCKER_ACCESS_KEY | docker login -u divyavan --password-stdin
            dockerpath=divyavan/capstone-backend:v2
            docker image tag capstone-backend:v2 $dockerpath
            docker push $dockerpath  
  create_cluster_and_deploy_app:
    docker:
      - image: cimg/aws:2022.06.1
    steps:
      - checkout
      - run:
          name: install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C .
            sudo mv eksctl /usr/local/bin
            eksctl version
      - run:
          name: install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin
      - run:
          name: configure aws cli
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
      - run:
          name: create cluster
          command: |
            chmod +x create_cluster.sh
            ./create_cluster.sh
            eksctl utils write-kubeconfig --cluster=capstone-cluster
      - run:
          name: kubectl deployments
          command: |
            chmod +x kubernetes_deploy.sh
            bash kubernetes_deploy.sh
      - run:
          name: get info about kubernetes objects
          command: |
            kubectl get nodes
            kubectl get pods
            kubectl get deployments
            kubectl get services
      - run:
          name: kubectl port-forward and run tests
          command: |
            kubectl port-forward services/capstone-service 5000:5000 &
            sleep 2
            ps aux
            out=$(curl -s http://localhost:5000)
            echo $out
            if [[ $out == "Hello, world" ]]; then echo "passed"; else echo "failed" && exit 1; fi
      #- destroy_environment
  create-infra:
    docker:
      - image: cimg/aws:2022.06.1
    steps:
      - checkout
      - run:
          name: install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C .
            sudo mv eksctl /usr/local/bin
            eksctl version
      - run:
          name: install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin
      - run:
          name: configure aws cli
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
      - run:
          name: create cluster
          command: |
            chmod +x create_cluster.sh
            ./create_cluster.sh
            eksctl utils write-kubeconfig --cluster=capstone-cluster      
  deploy-frontend:
    docker:
      - image: cimg/aws:2022.06.1
    parameters:
      app_version:
        type: string
        default: v0
    steps:
      - checkout
      - run:
          name: install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C .
            sudo mv eksctl /usr/local/bin
            eksctl version
      - run:
          name: install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin
      - run:
          name: configure aws cli
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
      - run:
          name: write kubeconfig file
          command: |
            eksctl utils write-kubeconfig --cluster=capstone-cluster 
      - run:
          name: install envsubst
          command: |
            sudo apt update || true
            sudo apt install gettext-base
      - run:
          name: deploying frontend
          command: |
            export VERSION=<< parameters.app_version >>
            envsubst < frontend-deployment.yml > fe-dep.yml
            cat fe-dep.yml
            kubectl apply -f fe-dep.yml
            chmod +x check_deployment_status.sh
            bash check_deployment_status.sh capstone-frontend            
            kubectl apply -f frontend-service.yml
  deploy-backend:
    docker:
      - image: cimg/aws:2022.06.1
    parameters:
      app_version:
        type: string
        default: v0      
    steps:
      - checkout
      - run:
          name: install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C .
            sudo mv eksctl /usr/local/bin
            eksctl version
      - run:
          name: install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin
      - run:
          name: configure aws cli
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
      - run:
          name: write kubeconfig file
          command: |
            eksctl utils write-kubeconfig --cluster=capstone-cluster      
      - run:
          name: install envsubst
          command: |
            sudo apt update || true
            sudo apt install gettext-base
      - run:
          name: deploying backend
          command: |
            export VERSION=<< parameters.app_version >>
            envsubst < backend-deployment.yml > be-dep.yml
            cat be-dep.yml
            kubectl apply -f be-dep.yml
            chmod +x check_deployment_status.sh
            bash check_deployment_status.sh capstone-backend
            kubectl apply -f backend-service.yml
  deploy-redis:
    docker:
      - image: cimg/aws:2022.06.1
    steps:
      - checkout
      - run:
          name: install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C .
            sudo mv eksctl /usr/local/bin
            eksctl version
      - run:
          name: install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin
      - run:
          name: configure aws cli
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
      - run:
          name: write kubeconfig file
          command: |
            eksctl utils write-kubeconfig --cluster=capstone-cluster      
      - run:
          name: deploying redis
          command: |
            kubectl apply -f redis-deployment.yml
            chmod +x check_deployment_status.sh
            bash check_deployment_status.sh capstone-redis
            kubectl apply -f redis-service.yml
  deploy-jaeger:
    docker:
      - image: cimg/aws:2022.06.1
    steps:
      - checkout
      - run:
          name: install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C .
            sudo mv eksctl /usr/local/bin
            eksctl version
      - run:
          name: install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin
      - run:
          name: configure aws cli
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
      - run:
          name: write kubeconfig file
          command: |
            eksctl utils write-kubeconfig --cluster=capstone-cluster      
      - run:
          name: deploying jaeger
          command: |
            kubectl apply -f jaeger-deployment.yml
            chmod +x check_deployment_status.sh
            bash check_deployment_status.sh capstone-jaeger
            kubectl apply -f jaeger-service.yml           
  print-kube-resources:
    docker:
      - image: cimg/aws:2022.06.1
    steps:
      - checkout
      - run:
          name: install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C .
            sudo mv eksctl /usr/local/bin
            eksctl version
      - run:
          name: install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin
      - run:
          name: configure aws cli
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
      - run:
          name: write kubeconfig file
          command: |
            eksctl utils write-kubeconfig --cluster=capstone-cluster
      - run:
          name: print kubernetes resources created
          command: |
            echo "printing frontend pods:"
            kubectl get pods -l app=frontend --show-labels
            echo "printing backend pods"
            kubectl get pods -l app=backend --show-labels
            echo "printing redis pods"
            kubectl get pods -l app=redis --show-labels
            echo "printing services created"
            kubectl get svc -o wide
  test-deployment:
    docker:
      - image: cimg/aws:2022.06.1
    steps:
      - checkout
      - run:
          name: install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C .
            sudo mv eksctl /usr/local/bin
            eksctl version
      - run:
          name: install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin
      - run:
          name: configure aws cli
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
      - run:
          name: write kubeconfig file
          command: |
            eksctl utils write-kubeconfig --cluster=capstone-cluster
      - run:
          name: send a request to frontend and verify page counter received
          command: |
            echo "running kubectl port-forward"
            kubectl port-forward services/capstone-frontend 5000:5000 &
            sleep 1
            ps aux
            echo "sending a request to the frontend"
            out=$(curl -s http://localhost:5000)
            echo $out
            appinfo=$(echo $out | cut -d"," -f1)
            if [[ $appinfo == "app-version=v1" ]]; then echo "app version info check passed"; else echo "app version info check failed" && exit 1; fi
            pageinfo=$(echo $out | cut -d"," -f2)
            if [[ $pageinfo =~ page-counter.* ]]; then echo "page counter check passed"; else echo "page counter check failed"; fi
  deploy-new-frontend:
    docker:
      - image: cimg/aws:2022.06.1
    parameters:
      app_version:
        type: string
        default: v0
    steps:
      - checkout
      - run:
          name: install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C .
            sudo mv eksctl /usr/local/bin
            eksctl version
      - run:
          name: install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin
      - run:
          name: configure aws cli
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
      - run:
          name: write kubeconfig file
          command: |
            eksctl utils write-kubeconfig --cluster=capstone-cluster 
      - run:
          name: install envsubst
          command: |
            sudo apt update || true
            sudo apt install gettext-base
      - run:
          name: deploying new frontend
          command: |
            export VERSION=<< parameters.app_version >>
            envsubst < frontend-deployment.yml > fe-dep.yml
            cat fe-dep.yml
            kubectl apply -f fe-dep.yml
            chmod +x check_deployment_status.sh
            bash check_deployment_status.sh capstone-frontend            
            kubectl apply -f frontend-service.yml
  deploy-new-backend:
    docker:
      - image: cimg/aws:2022.06.1
    parameters:
      app_version:
        type: string
        default: v0      
    steps:
      - checkout
      - run:
          name: install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C .
            sudo mv eksctl /usr/local/bin
            eksctl version
      - run:
          name: install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin
      - run:
          name: configure aws cli
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
      - run:
          name: write kubeconfig file
          command: |
            eksctl utils write-kubeconfig --cluster=capstone-cluster      
      - run:
          name: install envsubst
          command: |
            sudo apt update || true
            sudo apt install gettext-base
      - run:
          name: deploying new backend
          command: |
            export VERSION=<< parameters.app_version >>
            envsubst < backend-deployment.yml > be-dep.yml
            cat be-dep.yml
            kubectl apply -f be-dep.yml
            chmod +x check_deployment_status.sh
            bash check_deployment_status.sh capstone-backend
            kubectl apply -f backend-service.yml
workflows:
  default:
    jobs:
      - frontend-lint-checks
      - backend-lint-checks
      - build-frontend:
          requires: [frontend-lint-checks]
      - build-backend:
          requires: [backend-lint-checks]
      - create-infra:
          requires: [build-frontend, build-backend]
      - deploy-redis:
          requires: [create-infra]          
      - deploy-frontend:
          app_version: v1
          requires: [create-infra]
      - deploy-backend:
          app_version: v1
          requires: [create-infra, deploy-redis]
      - print-kube-resources:
          requires: [deploy-frontend, deploy-backend]
      - test-deployment:
          requires: [deploy-frontend, deploy-backend]
      - build-new-frontend:
          requires: [test-deployment]
      - build-new-backend:
          requires: [test-deployment]
      - deploy-jaeger:
          requires: [test-deployment]
      #- deploy-new-frontend:
      #    app_version: v2      
      #    requires: [build-new-frontend, deploy-jaeger]
      #- deploy-new-backend:
      #    app_version: v2      
      #    requires: [build-new-backend, deploy-jaeger, deploy-redis]
      #- create_cluster_and_deploy_app:
      #    requires: [build_and_push_image]
